var Class = require('./../../Class');

var lrucache = Class.extend({
    dict: {},
    capacity: 50,
    length: 0,
    defaultTime: 20000,
    initClass: function (capacity) {
        if (capacity < 1) {
            throw new Error('LRU Cache must have a positive capacity : ' + capacity + ' provided');
        }

        this.capacity = capacity;
    },
    setDefaultTime: function (time) {
        this.defaultTime = time;
    },
    get: function (key) {
        this.checkTime();
        if (this.dict[key]) {
            this.dict[key].use++;
            return this.dict[key].value;
        } else {
            return null;
        }
    },
    has: function (key) {
        this.checkTime();
        return !!this.dict[key];
    },
    remove: function (key) {
        if (this.dict[key]) {
            delete this.dict[key];
            this.length--;
        }
    },
    clear: function () {
        for (var key in this.dict) {
            delete this.dict[key];
            this.length--;
        }
    },
    size: function () {
        return this.length;
    },
    set: function (key, value, time) {
        if (!this.dict[key]) {
            if (this.length >= this.capacity) {
                this.removeLazy();
            }

            this.length++;
        }

        this.dict[key] = {
            value: value,
            use: 0,
            create: Date.now(),
            time: time !== undefined ? Date.now() + time : Date.now() + this.defaultTime
        };
    },
    checkTime: function () {
        var nowTime = Date.now();

        for (var key in this.dict) {
            if (nowTime > this.dict[key].time) {
                this.remove(key);
            }
        }
    },
    debug: function () {
        console.log(this.dict);
    },
    removeLazy: function () {
        var minUse = Number.MAX_VALUE;// 90071992547409,
        var minKey = null;

        for (var key in this.dict) {
            if (this.dict[key].use < minUse) {
                minUse = this.dict[key].use;
                minKey = key;
            }
        }

        delete this.dict[minKey];
        this.length--;
    }
});

module.exports = lrucache;