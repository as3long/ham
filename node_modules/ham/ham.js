// HAM的根目录
global.HAM_PATH = __dirname;

if (!global.APP_PATH) {
    throw new Error('APP_PATH must be defined');
}

var Ham = {};

global.Ham = Ham;
global.$A = require('./amvc');
Ham.Class = require('./lib/Class');

// Ham工具方法写到这里
Ham.utils = require('./lib/lib/core/utils');

// HAM的根目录
global.HAM_PATH = __dirname;

if (!global.APP_PATH) {
    throw new Error('APP_PATH must be defined');
}

Ham.run = require('./lib/lib/core/Run');

Ham.BaseController = require('./lib/lib/core/BaseController');

Ham.Controller = require('./lib/lib/core/Controller');
Ham.checkStaticResource = require('./lib/lib/core/CheckStaticResource');

/**
 * [404页面]
 * @param {[[Type]]} req [[Description]]
 * @param {[[Type]]} res [[Description]]
 */
Ham._404Action = function(req, res) {
    res.writeHead(404, {
        'Content-Type': 'text/plain; charset=utf-8;'
    });
    var str = [].slice.call(arguments, 2).join('|');

    res.end('找不到网页|' + str);
};

/**
 * [500错误页面]
 * @param {[[Type]]} req [[Description]]
 * @param {[[Type]]} res [[Description]]
 */
Ham._500Action = function(req, res) {
    res.writeHead(500, {
        'Content-Type': 'text/plain; charset=utf-8;'
    });
    res.end('服务器出现错误');
};

/**
     * [Ham初始化]
     */
Ham.init = function() {
    require(HAM_PATH + '/lib/common/common.js');
    var hamConfig = require(HAM_PATH + '/lib/conf/config.js');
    var appConfig = require(APP_PATH + '/ham/conf/config.js');

    Ham.utils.merge(hamConfig, appConfig, true);
    Ham.config = hamConfig;
    Ham.model = require('./lib/lib/core/Model.sqlite').create('main');
    Ham.cache = require('./lib/lib/utils/lrucache');
    process.on('uncaughtException', function(err) {
        console.error(isError(err) ? err.stack : err);
    });
};

module.exports = Ham;
